{"ast":null,"code":"var _jsxFileName = \"/Users/davidsychevskyi/Desktop/Codecademy related/jammming (mine)/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport SearchResults from './components/SearchResults';\nimport Playlist from './components/Playlist';\nimport SavePlaylist from './components/SavePlaylist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [searchResults, setSearchResults] = useState([]);\n  const [playlistName, setPlaylistName] = useState('My Playlist');\n  const [playlistTracks, setPlaylistTracks] = useState([]);\n  const handleSearch = term => {\n    // Example fetch request to Spotify API\n    const accessToken = 'your-spotify-access-token'; // This should be dynamically set based on OAuth\n    const url = `https://api.spotify.com/v1/search?q=${term}&type=track`;\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(data => {\n      const tracks = data.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n      setSearchResults(tracks);\n    });\n  };\n  const addTrackToPlaylist = track => {\n    setPlaylistTracks([...playlistTracks, track]);\n  };\n  const removeTrackFromPlaylist = track => {\n    setPlaylistTracks(playlistTracks.filter(t => t.id !== track.id));\n  };\n  const savePlaylist = () => {\n    // Add functionality to save the playlist to Spotify\n    const accessToken = 'your-spotify-access-token';\n    const playlistData = {\n      name: playlistName,\n      description: 'My custom playlist created with Jammming',\n      public: true\n    };\n    fetch('https://api.spotify.com/v1/me/playlists', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(playlistData)\n    }).then(response => response.json()).then(data => {\n      const playlistId = data.id;\n\n      // Add tracks to the newly created playlist\n      const trackUris = playlistTracks.map(track => track.uri);\n      fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uris: trackUris\n        })\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Jammming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchResults, {\n      searchResults: searchResults,\n      onAdd: addTrackToPlaylist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n      playlistName: playlistName,\n      tracks: playlistTracks,\n      onRemove: removeTrackFromPlaylist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SavePlaylist, {\n      onSave: savePlaylist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wRxypxC5qqUGDvIH+uUTIR2sTFg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SearchBar","SearchResults","Playlist","SavePlaylist","jsxDEV","_jsxDEV","App","_s","searchResults","setSearchResults","playlistName","setPlaylistName","playlistTracks","setPlaylistTracks","handleSearch","term","accessToken","url","fetch","method","headers","Authorization","then","response","json","data","tracks","items","map","track","id","name","artist","artists","album","uri","addTrackToPlaylist","removeTrackFromPlaylist","filter","t","savePlaylist","playlistData","description","public","body","JSON","stringify","playlistId","trackUris","uris","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onAdd","onRemove","onSave","_c","$RefreshReg$"],"sources":["/Users/davidsychevskyi/Desktop/Codecademy related/jammming (mine)/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport SearchResults from './components/SearchResults';\nimport Playlist from './components/Playlist';\nimport SavePlaylist from './components/SavePlaylist';\n\nfunction App() {\n  const [searchResults, setSearchResults] = useState([]);\n  const [playlistName, setPlaylistName] = useState('My Playlist');\n  const [playlistTracks, setPlaylistTracks] = useState([]);\n\n  const handleSearch = (term) => {\n    // Example fetch request to Spotify API\n    const accessToken = 'your-spotify-access-token'; // This should be dynamically set based on OAuth\n    const url = `https://api.spotify.com/v1/search?q=${term}&type=track`;\n    \n    fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        const tracks = data.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n        }));\n        setSearchResults(tracks);\n      });\n  };\n\n  const addTrackToPlaylist = (track) => {\n    setPlaylistTracks([...playlistTracks, track]);\n  };\n\n  const removeTrackFromPlaylist = (track) => {\n    setPlaylistTracks(playlistTracks.filter(t => t.id !== track.id));\n  };\n\n  const savePlaylist = () => {\n    // Add functionality to save the playlist to Spotify\n    const accessToken = 'your-spotify-access-token'; \n    const playlistData = {\n      name: playlistName,\n      description: 'My custom playlist created with Jammming',\n      public: true,\n    };\n\n    fetch('https://api.spotify.com/v1/me/playlists', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(playlistData),\n    })\n      .then(response => response.json())\n      .then(data => {\n        const playlistId = data.id;\n\n        // Add tracks to the newly created playlist\n        const trackUris = playlistTracks.map(track => track.uri);\n        \n        fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ uris: trackUris }),\n        });\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Jammming</h1>\n      <SearchBar onSearch={handleSearch} />\n      <SearchResults searchResults={searchResults} onAdd={addTrackToPlaylist} />\n      <Playlist playlistName={playlistName} tracks={playlistTracks} onRemove={removeTrackFromPlaylist} />\n      <SavePlaylist onSave={savePlaylist} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}